<!DOCTYPE html>
<html lang="es">

<body>

<div class="mb-4">
    <a href="/verProducto" class="text-gray-500 hover:text-gray-700">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        <span class="ml-2">Regresar</span>
    </a>
</div>


<!-- Contenedor principal para las dos columnas -->
<div class="flex justify-start space-x-8 my-12 w-3/4">

    <!-- Columna 1: Crear Producto -->
    <div class="block p-8 bg-white w-2/3 border border-gray-200 rounded-lg shadow-lg text-gray-800">
        <h1 class="text-center text-3xl font-bold">Crear Producto</h1>

        <form action="" method="POST" class="mt-4">
            <!-- Selección del tipo de producto -->
            <select 
                id="tipoProducto" 
                class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                    p-2 my-2 focus:bg-white" 
                name="tipoProducto" 
                required    
            >   
                <option value="" disabled selected>Seleccionar Tipo de Producto</option>
                {{#each tiposProductos}}
                    <option 
                        value="{{tipo_producto}}" 
                        {{#ifCond ../product.tipoProducto tipo_producto}}selected{{/ifCond}}
                    >
                        {{tipo_producto}}
                    </option>
                {{/each}}
            </select>

            <!-- Sección de características -->
            <label class="text-lg font-semibold w-full block">Características</label>
            <div id='labelSinCaracteristicas' class="flex justify-center my-4">
                <label class="text-lg w-1/4 text-center">
                    (Elija un producto para mostrar sus características)
                </label>
            </div>
            <div id="caracteristicas-container">
                <!-- Aquí se cargarán las características dinámicamente -->
            </div>

            <div class="flex justify-center">
                <select id="caracteristicasSelect" class="hidden border border-gray-300 rounded-md bg-gray-500 text-white p-2 text-lg focus:bg-gray-500 w-1/2 min-w-[150px]">
                    <option value="" disabled selected>Agregar característica</option>
                </select>
            </div>
            
            <button type="button" id="actualizarCaracteristicasProductoButton" class="hidden rounded-md bg-gray-500 w-full text-lg text-white font-semibold p-2 my-3
                hover:bg-gray-500 focus:bg-gray-700">Actualizar caracteristicas del tipo de producto</button>

            <!-- Sección de marca -->
            <label class="text-lg font-semibold w-full block mt-4">Marca</label>
            <select class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                p-2 my-2 focus:bg-white" name="Fk_Marca" required>
                <option value="" disabled selected>Seleccionar Marca</option>
                {{#each marcas}}
                    <option value="{{Id_Marca}}" {{#ifCond ../product.Fk_Marca Id_Marca}}selected{{/ifCond}}>
                        {{Nom_Marca}}
                    </option>
                {{/each}}
            </select>

            <!-- Sección de proveedor -->
            <label class="text-lg font-semibold w-full block mt-4">Proveedor</label>
            <select class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                p-2 my-2 focus:bg-white" name="Fk_Proveedor" required>
                <option value="" disabled selected>Seleccionar Proveedor</option>
                {{#each proveedores}}
                    <option value="{{Id_Proveedor}}" {{#ifCond ../product.Fk_Proveedor Id_Proveedor}}selected{{/ifCond}}>
                        {{Nom_Proveedor}}
                    </option>
                {{/each}}
            </select>

            <!-- Sección de nota -->
            <label class="text-lg font-semibold w-full block mt-4">Nota</label>
            <input type="text" class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                p-2 my-2 focus:bg-white" placeholder="Agregue información relevante si es necesario para el producto" name="notaInput">

            <!-- Botón de guardar -->
            <button type="submit" class="rounded-md bg-gray-500 w-full text-lg text-white font-semibold p-2 my-3
                hover:bg-gray-500 focus:bg-gray-700">Guardar</button>
        </form> 
    </div>

    <!-- Columna 2: Contenedores apara agregar nuevo tipo de producto y caracteristica -->
    <div class="block w-1/3">
        <!-- Primer contenedor -->
        <div class="p-8 bg-white border border-gray-200 rounded-lg shadow-lg text-gray-800">
            <h1 class="text-center text-3xl font-bold">Crear nueva característica</h1>
            <input 
                type="text" 
                id="nuevaCaracteristicaInput" 
                class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                    p-2 my-2 focus:bg-white" 
                placeholder="Nombre de la característica" 
                required
            >
            <button 
                id="agregarCaracteristicaButton" 
                class="rounded-md bg-gray-500 w-full text-lg text-white font-semibold p-2 my-3
                    hover:bg-gray-500 focus:bg-gray-700"
            >
                Agregar
            </button>
            <div class="flex justify-center">
                <select id="eliminarCaracteristicasSelect" class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                    p-2 my-2 focus:bg-white" >
                    <option value="" disabled selected>Seleccionar característica</option>
                </select>
            </div>
            <button 
                type="button" 
                id="eliminarCaracteristicaButton" 
                class="rounded-md bg-gray-500 w-full text-lg text-white font-semibold p-2 my-3 hover:bg-gray-500 focus:bg-gray-700"
                    >
                Eliminar caracteristica de la lista
            </button>
            
        </div>

        <!-- Segundo contenedor -->
        <div class="p-8 bg-white border border-gray-200 rounded-lg shadow-lg text-gray-800 mt-8">
            <h1 class="text-center text-3xl font-bold">Agregar nuevo tipo de producto</h1>
            <form id="nuevoTipoProductoForm" class="mt-4">
                <input 
                    type="text" 
                    id="nuevoTipoProductoInput" 
                    class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                        p-2 my-2 focus:bg-white" 
                    placeholder="Nombre del tipo de producto" 
                    name="tipo_producto" 
                    required
                >
                <button 
                    type="submit" 
                    id="agregarTipoProductoButton" 
                    class="rounded-md bg-gray-500 w-full text-lg text-white font-semibold p-2 my-3 hover:bg-gray-500 focus:bg-gray-700"
                >
                    Agregar
                </button>
            </form>
            <!-- Selección del tipo de producto -->
            <select 
                id="tipoProductoEliminar" 
                class="border border-gray-200 rounded-md bg-gray-200 w-full text-lg placeholder-gray-500 
                    p-2 my-2 focus:bg-white" 
                name="tipoProducto" 
                required    
            >   
                <option value="" disabled selected>Seleccionar Tipo de Producto</option>
                {{#each tiposProductos}}
                    <option 
                        value="{{tipo_producto}}" 
                        {{#ifCond ../product.tipoProducto tipo_producto}}selected{{/ifCond}}
                    >
                        {{tipo_producto}}
                    </option>
                {{/each}}
            </select>
            <!-- Botón para Eliminar tipo de producto -->
            <button 
                type="button" 
                id="eliminarTipoProductoButton" 
                class="rounded-md bg-gray-500 w-full text-lg text-white font-semibold p-2 my-3 hover:bg-gray-500 focus:bg-gray-700"
            >
                Eliminar tipo de producto
            </button>
        </div>
    </div>

</div>


<script>

    // Cargar las características del producto dinámicamente desde la nueva ruta
    document.getElementById('tipoProducto').addEventListener('change', function () {
        
        // Esconder el label donde dice que seleccione un producto
        document.getElementById('labelSinCaracteristicas').classList.add('hidden');
        //Mostrar el select para agregar caracteristicas
        document.getElementById('caracteristicasSelect').classList.remove('hidden');
        //Mostrar el select para agregar caracteristicas
        document.getElementById('actualizarCaracteristicasProductoButton').classList.remove('hidden');

        const tipoProducto = this.value;

        if (tipoProducto) {
            fetch(`/caracteristicas/${tipoProducto}`)
                .then(response => response.json())
                .then(caracteristicas => {
                    const container = document.getElementById('caracteristicas-container');
                    
                    container.innerHTML = ''; // Limpiar el contenedor antes de agregar nuevos campos

                    // Agregar características al contenedor
                    caracteristicas.forEach((caracteristica) => {
                        console.log(caracteristicas);
                        agregarCaracteristica(caracteristica, container, caracteristicas);
                    });
                })
                .catch(error => console.error('Error al obtener las características:', error));
        }
    });

    // Función para agregar una nueva característica al contenedor
    function agregarCaracteristica(caracteristica, container, caracteristicas) {
        const div = document.createElement('div'); 
        div.classList.add('flex', 'items-center', 'space-x-4', 'my-4');

        const divLabels = document.createElement('div');
        divLabels.classList.add('flex', 'items-center', 'px-5', 'gap-20', 'my-4');

        // Tipo de dato select
        const tipoDatoSelect = document.createElement('select');
        tipoDatoSelect.classList.add(
            'border', 'border-gray-300', 'rounded-md', 'bg-gray-200', 'p-2',
            'text-lg', 'focus:bg-white', 'w-1/5', 'min-w-[150px]'
        );
        tipoDatoSelect.innerHTML = `
            <option value="text" ${caracteristica.tipoDato === 'text' ? 'selected' : ''}>Texto</option>
            <option value="number" ${caracteristica.tipoDato === 'number' ? 'selected' : ''}>Numérico</option>
            <option value="boolean" ${caracteristica.tipoDato === 'boolean' ? 'selected' : ''}>Sí/No</option>
        `;
        tipoDatoSelect.name = 'tipoDatoSelect';

        // Campo de entrada dinámico (input o select)
        let campoDinamico;
        if (caracteristica.tipoDato === 'boolean') {
            campoDinamico = document.createElement('select');
            campoDinamico.classList.add('border', 'border-gray-300', 'rounded-md', 'bg-gray-200', 'p-2', 'text-lg', 'w-1/2');
            campoDinamico.innerHTML = `
                <option value="" disabled selected>Seleccione</option>
                <option value="Sí">Sí</option>
                <option value="No">No</option>
            `;
            campoDinamico.value = caracteristica.valor;
            campoDinamico.required = true;
        } else {
            campoDinamico = document.createElement('input');
            campoDinamico.type = caracteristica.tipoDato || 'text';
            campoDinamico.classList.add('border', 'border-gray-300', 'rounded-md', 'bg-gray-200', 'p-2', 'text-lg', 'focus:bg-white', 'w-1/2', 'min-w-[180px]', 'h-12');
            campoDinamico.placeholder = `Ingrese ${caracteristica.nombre}`;
            campoDinamico.required = true;
        }

        // Checkbox para opcional
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.classList.add('w-6', 'h-6');
        checkbox.checked = true;

        const labelCheckbox = document.createElement('label');
        labelCheckbox.textContent = 'Opcional';
        labelCheckbox.classList.add('ml-2', 'text-lg');

        // Botón de eliminar
        const buttonEliminar = document.createElement('button');
        buttonEliminar.className = 'p-2 bg-gray-800 text-white rounded-md hover:bg-gray-700 focus:bg-gray-900';
        buttonEliminar.textContent = 'Eliminar';
        buttonEliminar.addEventListener('click', function () {
            div.remove();
            divLabels.remove();
        });

        // Crear el elemento label para "Tipo de dato"
        let labelTipoDato = document.createElement('label');
        labelTipoDato.textContent = 'Tipo de dato';
        divLabels.appendChild(labelTipoDato);

        // Crear el elemento label para la caracteristica
        let labelCaracteristica = document.createElement('label');
        if (caracteristica.nombre) {
            labelCaracteristica.textContent = caracteristica.nombre;
        } else {
            labelCaracteristica.textContent = caracteristica;
        }
        divLabels.appendChild(labelCaracteristica);

        // Deshabilitar elementos si el nombre de la característica es "Modelo", "Serie" o "Precio (MXN)"
        const nombresOcultos = ["Modelo", "Serie", "Precio (MXN)"];
        if (nombresOcultos.includes(caracteristica.nombre)) {
            tipoDatoSelect.disabled = true;
            buttonEliminar.style.visibility = 'hidden';
            checkbox.disabled = true;
            checkbox.checked = false;
            labelCheckbox.disabled = true;
            labelTipoDato.disabled = true;
        }

        // Deshabilitar elementos si el nombre de la característica es "Modelo", "Serie" o "Precio (MXN)"
        if (nombresOcultos.includes(caracteristica)) {
            tipoDatoSelect.disabled = true;
            checkbox.disabled = true;
            labelCheckbox.disabled = true;
            labelTipoDato.disabled = true;
            campoDinamico.disabled = true;
            campoDinamico.placeholder = 'Este campo no puede ser repetido';

        }

        // Agregar elementos al div principal
        div.appendChild(tipoDatoSelect);
        div.appendChild(campoDinamico);
        div.appendChild(buttonEliminar);
        div.appendChild(checkbox);
        div.appendChild(labelCheckbox);

        // Agregar al contenedor general
        container.appendChild(divLabels);
        container.appendChild(div);

        // Evento para cambiar dinámicamente el tipo de campo
        tipoDatoSelect.addEventListener('change', function () {
            const selectedType = this.value;

            // Reemplazar el campo dinámico según el tipo seleccionado
            const parentDiv = this.parentElement;
            const currentField = parentDiv.querySelector('input, select:not([name="tipoDatoSelect"])');

            if (selectedType === 'boolean') {
                const comboBox = document.createElement('select');
                comboBox.classList.add('border', 'border-gray-300', 'rounded-md', 'bg-gray-200', 'p-2', 'text-lg', 'w-1/2');
                comboBox.innerHTML = `
                    <option value="" disabled selected>Seleccione</option>
                    <option value="Sí">Sí</option>
                    <option value="No">No</option>
                `;
                parentDiv.replaceChild(comboBox, currentField);
            } else {
                const inputReplacement = document.createElement('input');
                inputReplacement.type = selectedType;
                inputReplacement.classList.add('border', 'border-gray-300', 'rounded-md', 'bg-gray-200', 'p-2', 'text-lg', 'focus:bg-white', 'w-1/2', 'min-w-[180px]', 'h-12');
                inputReplacement.placeholder = `Ingrese un valor`;
                parentDiv.replaceChild(inputReplacement, currentField);
            }
        });
    }

    // Función para actualizar el select de características
    async function actualizarSelectCaracteristicas() {
        const selectElement = document.getElementById('caracteristicasSelect');
        const selectElementEliminar = document.getElementById('eliminarCaracteristicasSelect');
        const nombresOcultos = ["Modelo", "Serie", "Precio (MXN)"];

        try {
            const response = await fetch('/caracteristicas');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            const data = await response.json();

            if (Array.isArray(data)) {
                // Limpiar las opciones existentes en ambos selectores
                selectElement.innerHTML = '<option value="">Agregar característica</option>';
                selectElementEliminar.innerHTML = '<option value="">Eliminar característica</option>';

                // Agregar las nuevas opciones
                data.forEach(item => {
                    if (!nombresOcultos.includes(item.nombre)) {
                        const option = document.createElement('option');
                        option.value = item.nombre;
                        option.textContent = item.nombre;

                        // Agregar opción a ambos selectores
                        selectElement.appendChild(option);
                        selectElementEliminar.appendChild(option.cloneNode(true));
                    }
                });
            } else {
                throw new Error('El formato de los datos no es válido.');
            }
        } catch (error) {
            console.error('Error al actualizar el select:', error);
        }
    }

    // Cargar las características del producto dinámicamente desde la nueva ruta
    document.addEventListener('DOMContentLoaded', async () => {
        const selectElement = document.getElementById('caracteristicasSelect');
        const container = document.getElementById('caracteristicas-container');
        actualizarSelectCaracteristicas();
        // Evento para agregar una nueva característica al seleccionar una opción
        selectElement.addEventListener('change', (event) => {
            const selectedCaracteristica = event.target.value;
            console.log('Característica seleccionada:');
            console.log(selectedCaracteristica)

            // Verificar que se haya seleccionado una opción válida
            if (selectedCaracteristica) {
                // Llamar a la función para agregar la característica seleccionada
                agregarCaracteristica(selectedCaracteristica, container);
            }
        });
    });

    // Evento para el segundo contenedor (Agregar nuevo tipo de producto)
    document.getElementById('nuevoTipoProductoForm').addEventListener('submit', async function(event) {

        const tipoProducto = document.getElementById('nuevoTipoProductoInput').value.trim();
        if (!tipoProducto) {
            alert("Por favor, ingresa un nombre para el tipo de producto.");
            return;
        }

        try {
            const response = await fetch('/nuevoTipoProducto', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ tipoProducto })
            });

            if (response.ok) {
                alert("Tipo de producto agregado con éxito.");
                document.getElementById('nuevoTipoProductoInput').value = ""; // Limpiar el input
            } else {
                alert("Error al agregar el tipo de producto.");
            }
        } catch (error) {
            console.error("Error en la solicitud:", error);
            alert("Ocurrió un error al agregar el tipo de producto.");
        }
    });

    // Evento para el primer contenedor (Crear nueva característica)
    document.getElementById('agregarCaracteristicaButton').addEventListener('click', async function(event) {

        const nombreCaracteristica = document.getElementById('nuevaCaracteristicaInput').value.trim();
        if (!nombreCaracteristica) {
            alert("Por favor, ingresa un nombre para la característica.");
            return;
        }

        try {
            const response = await fetch('/nuevaCaracteristica', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    nombreCaracteristica,
                    tipoValor: "text",
                    numCaracteresMin: 0,
                    numCaracteresMax: 100,
                    opcional: false
                })
            });

            if (response.ok) {
                alert("Característica agregada con éxito.");
                document.getElementById('nuevaCaracteristicaInput').value = ""; // Limpiar el input
                //window.location.reload(); // Recargar la página
                actualizarSelectCaracteristicas();
            } else {
                alert("Error al agregar la característica.");
            }
        } catch (error) {
            console.error("Error en la solicitud:", error);
            alert("Ocurrió un error al agregar la característica.");
        }
    });
    
    // Evento para el segundo contenedor (Eliminar tipo de producto)
    document.getElementById('eliminarTipoProductoButton').addEventListener('click', async () => {
        const selectElement = document.getElementById('tipoProductoEliminar');
        console.log(selectElement);
        const tipoProducto = selectElement.value;
        

        if (!tipoProducto) {
            alert('Por favor, selecciona un tipo de producto.');
            return;
        }

        try {
            const response = await fetch(`/eliminarTipoProducto/${encodeURIComponent(tipoProducto)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ tipoProducto }),
            });

            const data = await response.json();

            if (response.ok) {
                alert(data.message);
                // Aquí puedes agregar lógica para actualizar la interfaz, como eliminar la opción del select
                selectElement.querySelector(`option[value="${tipoProducto}"]`).remove();
                window.location.reload(); // Recargar la página
            } else {
                alert(data.error || 'Error al eliminar el tipo de producto.');
            }
        } catch (error) {
            console.error('Error al eliminar el tipo de producto:', error);
            alert('Hubo un problema al procesar tu solicitud.');
        }
    });

    // Evento para el segundo contenedor (Eliminar características del tipo de producto)
    document.getElementById('eliminarCaracteristicaButton').addEventListener('click', async () => {
        const selectElement = document.getElementById('eliminarCaracteristicasSelect');
        const nombreCaracteristica = selectElement.value;

        if (!nombreCaracteristica) {
            alert('Por favor, selecciona una característica para eliminar.');
            return;
        }

        try {
            const response = await fetch(`/eliminarCaracteristica/${encodeURIComponent(nombreCaracteristica)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ nombreCaracteristica }),
            });

            const data = await response.json();

            if (response.ok) {
                alert(data.mensaje);
                // Actualizar la lista de características eliminando la seleccionada
                //selectElement.querySelector(`option[value="${nombreCaracteristica}"]`).remove();
                actualizarSelectCaracteristicas();
            } else {
                alert(data.mensaje || 'Error al eliminar la característica.');
            }
        } catch (error) {
            console.error('Error al eliminar la característica:', error);
            alert('Hubo un problema al procesar tu solicitud.');
        }
    });

    // Evento para el formulario principal (Crear Producto)
    document.querySelector('form').addEventListener('submit', async (event) => {
        event.preventDefault(); // Evita recargar la página

        // Capturar los valores del formulario
        const tipoProducto = document.getElementById('tipoProducto').value;
        const Fk_Marca = document.querySelector('[name="Fk_Marca"] option:checked').textContent.trim(); // Capturar el texto de la opción seleccionada
        const Fk_Proveedor = document.querySelector('[name="Fk_Proveedor"] option:checked').textContent.trim(); // Capturar el texto de la opción seleccionada
        const nota = document.querySelector('[name="notaInput"]').value;

    // Construir el array de características desde los campos dinámicos
    const caracteristicas = Array.from(document.querySelectorAll('#caracteristicas-container .flex.items-center.space-x-4')).map(div => {
        // Seleccionar los elementos específicos dentro de cada `div`
        const tipoDatoSelect = div.querySelector('[name="tipoDatoSelect"]')?.value || null; // Tipo de dato (select)
        const valor = div.querySelector('input[type="text"], input[type="number"]')?.value || null; // Valor (input de texto o número)
        const opcional = div.querySelector('input[type="checkbox"]')?.checked || false; // Opcional (checkbox)
        const nombre = div.previousElementSibling?.querySelector('label:nth-child(2)')?.textContent.trim() || 'Sin nombre'; // Nombre (label anterior al grupo)

        // Validar que los datos clave existan
        if (tipoDatoSelect && valor && nombre) {
            console.log({ tipoDatoSelect, valor, nombre, opcional });
            return { nombre, tipoDato: tipoDatoSelect, valor, opcional };
        }

        console.warn('Campo faltante en característica, omitiendo:', { tipoDatoSelect, valor, nombre, opcional });
        return null; // Ignorar si falta información clave
    }).filter(c => c !== null); // Filtrar características inválidas

    console.log(caracteristicas);


        // Crear el objeto a enviar
        const producto = {
            tipoProducto,
            caracteristicas,
            Fk_Marca, // Aquí va "DELL" o el valor seleccionado
            Fk_Proveedor, // Aquí va el nombre del proveedor
            nota
        };

        try {
            // Hacer el POST al backend
            const response = await fetch('/nuevoProducto', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(producto),
            });
            // En caso de que la respuesta sea exitosa mostrar un mensaje
            if (response.ok) {
                const data = await response.json();
                alert('Producto creado exitosamente');
                console.log(data);
                window.location.href = '/verProducto'; // Redirigir después de mostrar el alert
            // En caso de que la respuesta no sea exitosa mostrar un mensaje de error
            } else {
                alert('Error al crear el producto');
            }
            // En caso de que haya un error en la petición mostrar un mensaje
        } catch (error) {
            console.error('Error:', error);
            alert('Error al enviar los datos');
        }
    });



    </script>

</body>
</html>